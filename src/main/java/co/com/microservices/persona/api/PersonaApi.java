/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package co.com.microservices.persona.api;

import co.com.microservices.persona.model.GeneralRequest;
import co.com.microservices.persona.model.Persona;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-08-31T10:15:12.025-05:00")

@Api(value = "persona", description = "the persona API")
public interface PersonaApi {

    @ApiOperation(value = "Add a new person to the store", nickname = "addPersona", notes = "", tags={ "MicroservicePersona", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad request") })
    @RequestMapping(value = "/persona",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> addPersona(@ApiParam(value = "Person object that needs to be added to the store" ,required=true )  @Valid @RequestBody Persona body);


    @ApiOperation(value = "Delete an existing Person", nickname = "deletePerson", notes = "", tags={ "MicroservicePersona", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Person not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/persona",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<?> deletePerson(@ApiParam(value = "Person object that needs to be added to the store" ,required=true )  @Valid @RequestBody GeneralRequest body);


    @ApiOperation(value = "Finds Persons by Correo", nickname = "findPersonByCorreo", notes = "Seleccionar personas por CORREO", response = List.class, tags={ "MicroservicePersona", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = List.class),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/persona/findByCorreo",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> findPersonByCorreo(@ApiParam(value = "Correo de la persona", required = true) @RequestParam ("correo") String correo);


    @ApiOperation(value = "Finds Persons by Id", nickname = "findPersonById", notes = "Seleccionar personas por ID", response = List.class, tags={ "MicroservicePersona", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = List.class),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/persona/findById",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> findPersonById(@ApiParam(value = "Id de la persona", required = true) @RequestParam ("id") String id);


    @ApiOperation(value = "Update an existing Person", nickname = "updatePerson", notes = "", tags={ "MicroservicePersona", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Person not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/persona",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<?> updatePerson(@ApiParam(value = "Person object that needs to be added to the store" ,required=true )  @Valid @RequestBody Persona body);

}
